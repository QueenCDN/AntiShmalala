import logging
import re
from telegram import Update, ReplyKeyboardRemove
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    filters, ContextTypes, CallbackQueryHandler, ConversationHandler
)

import config
import texts
import keyboards
import db
import gemini_utils

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logging.getLogger("httpx").setLevel(logging.WARNING)
logger = logging.getLogger(__name__)

CHOOSING_ACTION = 0

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    await update.message.reply_html(
        rf"–ù—É –ø—Ä–∏–≤–µ—Ç, {user.mention_html()}. {texts.START_MESSAGE}", # –ù–µ–º–Ω–æ–≥–æ –≤ —Å—Ç–∏–ª–µ –®–º—ã
        reply_markup=keyboards.get_main_keyboard(),
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(texts.HELP_MESSAGE, reply_markup=keyboards.get_main_keyboard())

async def tell_joke_action(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.effective_chat.id
    await context.bot.send_chat_action(chat_id=chat_id, action="typing")
    joke = await gemini_utils.get_gemini_joke()
    await update.message.reply_text(joke)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not update.message or not update.message.text:
        return

    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    text_original = update.message.text # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è Gemini
    text_lower = text_original.lower().strip()

    if text_lower == "—à–º–∞, –æ—Ç–∫–ª—é—á–∏—Å—å":
        if db.mute_user(user_id):
            await update.message.reply_text(texts.USER_MUTED_MSG)
        else:
            await update.message.reply_text(texts.ALREADY_MUTED_MSG)
        return
    elif text_lower == "—à–º–∞, –≤–∫–ª—é—á–∏—Å—å":
        if db.unmute_user(user_id):
            await update.message.reply_text(texts.USER_UNMUTED_MSG)
        else:
            await update.message.reply_text(texts.ALREADY_UNMUTED_MSG)
        return

    if text_lower == "—à–º–∞, —Ä–∞—Å—Å–∫–∞–∂–∏ –∞–Ω–µ–∫–¥–æ—Ç":
        await tell_joke_action(update, context)
        return

    if db.is_user_muted(user_id):
        return
    
    await context.bot.send_chat_action(chat_id=chat_id, action="typing")
    gemini_response = await gemini_utils.get_gemini_response(text_original) # –ü–µ—Ä–µ–¥–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
    if gemini_response:
        await update.message.reply_text(gemini_response)


async def roll_dice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.effective_chat.id
    await context.bot.send_dice(chat_id=chat_id)


async def truth_or_dare_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message and update.message.text == texts.TRUTH_OR_DARE_BUTTON_TEXT:
        await update.message.reply_text(
            texts.TRUTH_OR_DARE_PROMPT,
            reply_markup=keyboards.get_truth_or_dare_inline_keyboard()
        )
    elif update.callback_query:
        query = update.callback_query
        await query.answer()
        await query.edit_message_text(
            text=texts.TRUTH_OR_DARE_PROMPT,
            reply_markup=keyboards.get_truth_or_dare_inline_keyboard()
        )
    return CHOOSING_ACTION


async def truth_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(text="–©–∞ —è —Ç–µ–±–µ —Ç–∞–∫—É—é –ø—Ä–∞–≤–¥—É –≤—ã–∫–∞—á—É, –æ–±–æ—Å—Ä*—à—å—Å—è... –ò—â—É —Å–∞–º—ã–π –º–µ—Ä–∑–∫–∏–π –≤–æ–ø—Ä–æ—Å...")
    
    await context.bot.send_chat_action(chat_id=query.message.chat_id, action="typing")
    question = await gemini_utils.get_truth_question()

    if question:
        # –¢–µ–ø–µ—Ä—å –®–º–∞ –∑–∞–¥–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å
        response_text = f"‚ùì **–ù—É —á—Ç–æ, –≥–æ—Ç–æ–≤(–∞) –∫ –ø—Ä–∞–≤–¥–µ, –Ω–∏—á—Ç–æ–∂–µ—Å—Ç–≤–æ?**\n\n{question}\n\n–û—Ç–≤–µ—á–∞–π –¥–∞–≤–∞–π, –Ω–µ —Ç—è–Ω–∏ –∫–æ—Ç–∞ –∑–∞ —è–π—Ü–∞." 
        await query.edit_message_text(text=response_text, parse_mode='Markdown') # Markdown –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è
    else:
        await query.edit_message_text(text=texts.ERROR_TRUTH_MSG) 
    
    return ConversationHandler.END

async def dare_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(text="–¢–∞–∫, —Å–µ–π—á–∞—Å —è —Ç–µ–±–µ —Ç–∞–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ –ø—Ä–∏–¥—É–º–∞—é, –±—É–¥–µ—à—å –¥–æ–ª–≥–æ –æ—Ç–º—ã–≤–∞—Ç—å—Å—è... –•–∞-—Ö–∞.") 

    await context.bot.send_chat_action(chat_id=query.message.chat_id, action="typing")
    dare_task = await gemini_utils.get_dare_task()
    
    response_text = f"üî• **–ù—É —á—Ç–æ, —Å–ª–∞–±–∞–∫, –≥–æ—Ç–æ–≤(–∞) –∫ –¥–µ–π—Å—Ç–≤–∏—é?**\n\n{dare_task}\n\n–í—ã–ø–æ–ª–Ω—è–π, –∏–ª–∏ —è —Ç–µ–±—è –ø—Ä–æ–∫–ª—è–Ω—É!"
    await query.edit_message_text(text=response_text, parse_mode='Markdown')
    
    return ConversationHandler.END

async def cancel_truth_or_dare(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    cancel_message = "–ü—Ñ, —Å–ª–∞–±–∞–∫. –°–ª–∏–ª—Å—è, –∫–∞–∫ –æ–±—ã—á–Ω–æ. –ù–∏—á–µ–≥–æ –¥—Ä—É–≥–æ–≥–æ –∏ –Ω–µ –æ–∂–∏–¥–∞–ª–∞." 
    if query:
        await query.answer()
        await query.edit_message_text(text=cancel_message)
    elif update.message:
        await update.message.reply_text(cancel_message, reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END


def main() -> None:
    if not config.TELEGRAM_BOT_TOKEN or not config.GEMINI_API_KEY:
        logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω TELEGRAM_BOT_TOKEN –∏–ª–∏ GEMINI_API_KEY –≤ .env —Ñ–∞–π–ª–µ.")
        return

    application = Application.builder().token(config.TELEGRAM_BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))

    application.add_handler(MessageHandler(filters.Regex(f"^{re.escape(texts.JOKE_BUTTON_TEXT)}$"), tell_joke_action))
    application.add_handler(MessageHandler(filters.Regex(f"^{re.escape(texts.DICE_BUTTON_TEXT)}$"), roll_dice))

    tod_conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex(f"^{re.escape(texts.TRUTH_OR_DARE_BUTTON_TEXT)}$"), truth_or_dare_start)],
        states={
            CHOOSING_ACTION: [
                CallbackQueryHandler(truth_chosen, pattern="^truth_or_dare_truth$"),
                CallbackQueryHandler(dare_chosen, pattern="^truth_or_dare_dare$"),
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel_truth_or_dare)],
    )
    application.add_handler(tod_conv_handler)

    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logger.info("–ë–æ—Ç –®–º–∞ (–∑–ª–∞—è –≤–µ—Ä—Å–∏—è) –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    application.run_polling()

if __name__ == "__main__":
    db.init_db()
    main()